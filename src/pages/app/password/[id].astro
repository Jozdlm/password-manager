---
import { actions } from "astro:actions";
import Layout from "../../../layouts/Layout.astro";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { buttonVariants } from "@/components/ui/button";
import { ArrowLeft, Clipboard } from "lucide-react";

const { id } = Astro.params;
if (!id) {
  return Astro.redirect("/");
}

const updateUrlPage = `/app/update-password/${id}`;

const { data, error } = await actions.getPasswordById(id);
if (!data || error) {
  return Astro.redirect("/");
}

let websitePlaceholder = data.url;
if (URL.canParse(data.url)) {
  websitePlaceholder = new URL(data.url).hostname;
}

const deleteResult = Astro.getActionResult(actions.deletePasswordById);
if (deleteResult && !deleteResult.error) {
  return Astro.redirect("/app");
}
---

<Layout title="Password Manager">
  <Card>
    <CardHeader>
      <CardTitle className="flex items-center gap-x-4">
        <a
          type="button"
          class={buttonVariants({ variant: "ghost", size: "icon" })}
          href="/"
        >
          <ArrowLeft className="w-4 h-4" />
        </a>
        <p>{websitePlaceholder}</p>
      </CardTitle>
    </CardHeader>
    <CardContent>
      <div class="grid grid-cols-2 gap-6">
        <div class="relative w-full max-w-sm items-center">
          <div class="relative grid gap-1.5">
            <Label htmlFor="username">Usuario</Label>
            <Input
              type="text"
              id="username"
              name="username"
              readOnly
              value={data.username}
            />
          </div>
          <div class="absolute bottom-2.5 right-2 flex items-center gap-x-2">
            <button
              class="rounded-full p-1 hover:bg-zinc-700"
              id="clipboardUsername"
            >
              <Clipboard className="w-4 h-4" />
            </button>
          </div>
        </div>
        <div>
          <p class="text-sm mb-2">Sitio Web</p>
          <a
            href={data.url}
            target="_blank"
            rel="noopener noreferer"
            class="text-gray-300 underline hover:text-gray-100"
            >{websitePlaceholder}</a
          >
        </div>
        <div class="relative w-full max-w-sm items-center">
          <div class="relative grid gap-1.5">
            <Label htmlFor="password">Contraseña</Label>
            <Input
              type="password"
              id="password"
              name="password"
              readOnly
              value={data.password}
            />
          </div>
          <div class="absolute bottom-2.5 right-2 flex items-center gap-x-2">
            <button type="button" class="text-sm" id="showPasswordBtn"
              >Mostrar</button
            >
            <button
              class="rounded-full p-1 hover:bg-zinc-700"
              id="clipboardPassword"
            >
              <Clipboard className="w-4 h-4" />
            </button>
          </div>
        </div>
        <div>
          <p class="text-sm mb-2">Nota</p>
          <p class="text-gray-300">
            {data.note.trim() === "" ? "No hay ninguna nota" : data.note}
          </p>
        </div>
      </div>
      {
        deleteResult?.error && (
          <section class="bg-red-950 text-red-300 p-3 rounded text-center">
            <p>
              Se ha producido un error al intentar eliminar la contraseña. Por
              favor inténtalo más tarde.
            </p>
          </section>
        )
      }
    </CardContent>
    <CardFooter className="flex gap-x-2 justify-end">
      <form method="post" action={actions.deletePasswordById}>
        <input type="text" name="passwordId" value={id} hidden />
        <button
          class={buttonVariants({ variant: "outline" })}
          id="deleteButton"
          type="submit">Eliminar</button
        >
      </form>
      <a class={buttonVariants({ variant: "primary" })} href={updateUrlPage}
        >Editar</a
      >
    </CardFooter>
  </Card>
</Layout>

<script>
  const deleteButton = document.getElementById(
    "deleteButton"
  ) as HTMLButtonElement;
  const itemId = deleteButton.dataset["itemId"] as string;
  const usernameInput = document.getElementById("username") as HTMLInputElement;
  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const showPasswordBtn = document.getElementById(
    "showPasswordBtn"
  ) as HTMLButtonElement;
  const clipboardUsername = document.getElementById(
    "clipboardUsername"
  ) as HTMLButtonElement;
  const clipboardPassword = document.getElementById(
    "clipboardPassword"
  ) as HTMLButtonElement;

  clipboardUsername.addEventListener("click", async () => {
    const text = usernameInput.value;
    await navigator.clipboard.writeText(text);
  });

  clipboardPassword.addEventListener("click", async () => {
    const text = passwordInput.value;
    await navigator.clipboard.writeText(text);
  });

  showPasswordBtn.addEventListener("click", () => {
    const type = passwordInput.type;
    const label = showPasswordBtn.textContent;

    passwordInput.type = type == "text" ? "password" : "text";
    showPasswordBtn.textContent = label == "Mostrar" ? "Ocultar" : "Mostrar";
  });
</script>
