---
import ArrowLeftIcon from "../../components/icons/ArrowLeftIcon.astro";
import ClipboardIcon from "../../components/icons/ClipboardIcon.astro";
import Input from "../../components/ui/Input.astro";
import Label from "../../components/ui/Label.astro";
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/supabase";
import { GET } from "../api/passwords/[id]";

const { cookies, redirect } = Astro;
const { id } = Astro.params;

let response = await GET(Astro);
const data = await response.json();

if (data?.error) {
  return Astro.redirect("/");
}

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");
const websiteUrl = `https://www.${data.url}/`;

if (!accessToken || !refreshToken) {
  return redirect("/login");
}

const { error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/login");
}
---

<Layout title="Password Manager">
  <main class="mx-auto max-w-[600px]">
    <section class="flex gap-x-3 items-center mb-4">
      <a href="/" class="hover:bg-slate-700 p-2 rounded-full">
        <ArrowLeftIcon />
      </a>

      <h1>{data.url}</h1>
    </section>
    <section class="bg-zinc-800 rounded-md p-6">
      <div class="border-b border-b-zinc-600 mb-6 pb-6 grid grid-cols-2 gap-6">
        <div class="relative">
          <div class="relative">
            <Label label="Usuario" forInput="username" />
            <Input
              type="text"
              id="username"
              name="username"
              readonly
              value={data.username}
            />
          </div>
          <div class="absolute bottom-[6px] right-2 flex items-center gap-x-2">
            <button
              class="rounded-full p-1 hover:bg-zinc-700"
              id="clipboardUsername"
            >
              <ClipboardIcon />
            </button>
          </div>
        </div>
        <div>
          <p class="text-sm mb-2">Sitio Web</p>
          <a
            href={websiteUrl}
            target="_blank"
            rel="noopener noreferer"
            class="text-gray-300 underline hover:text-gray-100">{data.url}</a
          >
        </div>
        <div class="relative">
          <div class="relative">
            <Label forInput="password" label="ContraseÃ±a" />
            <Input
              type="password"
              id="password"
              name="password"
              readonly
              value={data.password}
            />
          </div>
          <div class="absolute bottom-[6px] right-2 flex items-center gap-x-2">
            <button type="button" class="text-sm" id="showPasswordBtn"
              >Mostrar</button
            >
            <button
              class="rounded-full p-1 hover:bg-zinc-700"
              id="clipboardPassword"
            >
              <ClipboardIcon />
            </button>
          </div>
        </div>
        <div>
          <p class="text-sm mb-2">Nota</p>
          <p class="text-gray-300">
            {data.note.trim() === "" ? "No hay ninguna nota" : data.note}
          </p>
        </div>
      </div>
      <div class="flex gap-x-2 justify-end">
        <button
          class="bg-zinc-800 hover:bg-red-800 hover:text-white text-red-400 py-2 px-4 rounded-md font-medium text-sm"
          id="deleteButton"
          data-item-id={id}>Eliminar</button
        >
        <button
          class="bg-green-700 hover:bg-green-600 text-white py-2 px-4 rounded-md font-medium text-sm"
          >Editar</button
        >
      </div>
    </section>
  </main>
</Layout>

<script>
  const deleteButton = document.getElementById(
    "deleteButton"
  ) as HTMLButtonElement;
  const itemId = deleteButton.dataset["itemId"] as string;
  const apiEndpoint = `/api/passwords/${itemId}`;
  const usernameInput = document.getElementById("username") as HTMLInputElement;
  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const showPasswordBtn = document.getElementById(
    "showPasswordBtn"
  ) as HTMLButtonElement;
  const clipboardUsername = document.getElementById(
    "clipboardUsername"
  ) as HTMLButtonElement;
  const clipboardPassword = document.getElementById(
    "clipboardPassword"
  ) as HTMLButtonElement;

  clipboardUsername.addEventListener("click", async () => {
    const text = usernameInput.value;
    await navigator.clipboard.writeText(text);
  });

  clipboardPassword.addEventListener("click", async () => {
    const text = passwordInput.value;
    await navigator.clipboard.writeText(text);
  });

  showPasswordBtn.addEventListener("click", () => {
    const type = passwordInput.type;
    const label = showPasswordBtn.textContent;

    passwordInput.type = type == "text" ? "password" : "text";
    showPasswordBtn.textContent = label == "Mostrar" ? "Ocultar" : "Mostrar";
  });

  deleteButton.addEventListener("click", async () => {
    const response = await fetch(apiEndpoint, {
      method: "DELETE",
    });

    if (response.redirected) {
      window.location.assign(response.url);
    }
  });
</script>
